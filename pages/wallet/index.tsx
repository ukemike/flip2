import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import type { NextPage } from 'next'
import Head from 'next/head'
import WalletComponent from '../../src/components/dashboard/wallet/Wallet'
import { getWalletBalance, topUpWallet, requestWithdrawal, getTransactions, clearError, clearMessage } from '../../src/redux/features/accountSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Wallet: NextPage = () => {
    const dispatch = useAppDispatch()

    const { token } = useAppSelector((state) => state.auth)
    const { walletBalance, transactions, loadingFetchWalletBalance, loadingFetchTransactions, loading, message, success, error } = useAppSelector((state) => state.account)

    useEffect(() => {
        dispatch(getWalletBalance(token))
        dispatch(getTransactions(token))
    }, [dispatch, token])

    const handleTopUpWallet = (data: any) => {
        dispatch(topUpWallet(data))
    }

    const handleRequestWithdrawal = (data: any) => {
        dispatch(requestWithdrawal(data))
    }

    return (
        <div>
            <Layout title="Wallet">
                <Head>
                    <title>Cue |  The artisan for Digital and Offline Space</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/flip-favicon.png" />
                </Head>

                <WalletComponent
                    walletBalance={walletBalance}
                    transactions={transactions}
                    loadingFetchWalletBalance={loadingFetchWalletBalance}
                    loadingFetchTransactions={loadingFetchTransactions}
                    loading={loading}
                    success={success}
                    topUpWallet={handleTopUpWallet}
                    requestWithdrawal={handleRequestWithdrawal}
                />

                {error &&
                    <AlertModal
                        title='Error'
                        message={error}
                        confirmButtonText="Ok"
                        type="error"
                        onConfirm={() => {
                            dispatch(clearError())
                        }}
                    />
                }

                {success &&
                    <AlertModal
                        title='Success'
                        message={message}
                        confirmButtonText="Ok"
                        type="success"
                        onConfirm={() => {
                            dispatch(clearMessage())
                            dispatch(getWalletBalance(token))
                        }}
                    />
                }

                <footer >

                </footer>
            </Layout>
        </div>
    )
}

export default Wallet