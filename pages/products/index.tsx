import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import ProductComponent from '../../src/components/dashboard/products/Product'
import type { NextPage } from 'next'
import Head from 'next/head'
import { createProduct, updateProduct, getMyProducts, deactivateProduct, activateProduct, addProductImages, removeProductImage, addProductFeatures, addProductSpecifications, removeProductSpecification, getProductsCategory, clearMessage, clearError } from '../../src/redux/features/productSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useCallback } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Products: NextPage = () => {
  const dispatch = useAppDispatch()

  const { token } = useAppSelector((state) => state.auth)
  const { loading, loadingFetchProducts, error, success, message, products, successActivateProductDeactivateProduct, loadingActivateProductDeactivateProduct, errorActivateProductDeactivateProduct, productsCategory } = useAppSelector((state) => state.product)

  const fetchProductsAndCategory = useCallback(() => {
    dispatch(getMyProducts(token))
    dispatch(getProductsCategory(token))
  }, [dispatch, token])

  useEffect(() => {
    fetchProductsAndCategory()
  }, [fetchProductsAndCategory])

  const handleCreateProduct = useCallback((data: any) => {
    dispatch(createProduct(data))
  }, [dispatch])

  const handleUpdateProduct = useCallback((data: any) => {
    dispatch(updateProduct(data))
  }, [dispatch])

  const handleDeactiveProduct = useCallback((id: number) => {
    dispatch(deactivateProduct(id))
  }, [dispatch])

  const handleActiveProduct = useCallback((id: number) => {
    dispatch(activateProduct(id))
  }, [dispatch])

  const handleAddProductImages = useCallback((data: any) => {
    dispatch(addProductImages(data))
  }, [dispatch])

  const handleAddProductFeatures = useCallback((data: any) => {
    dispatch(addProductFeatures(data))
  }, [dispatch])

  const handleAddProductSpecifications = useCallback((data: any) => {
    dispatch(addProductSpecifications(data))
  }, [dispatch])

  const handleRemoveProductSpecification = useCallback((data: any) => {
    dispatch(removeProductSpecification(data))
  }, [dispatch])

  const handleRemoveProductImage = useCallback((id: number) => {
    dispatch(removeProductImage(id))
  }, [dispatch])

  return (
    <div>
      <Layout title="Products">
        <Head>
          <title>Flip</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/flip-favicon.png" />
        </Head>

        <ProductComponent
          allProducts={products}
          createProduct={handleCreateProduct}
          updateProduct={handleUpdateProduct}
          deactivateProduct={handleDeactiveProduct}
          activateProduct={handleActiveProduct}
          addProductImages={handleAddProductImages}
          loading={loading}
          loadingFetchProducts={loadingFetchProducts}
          success={success}
          successActivateProductDeactivateProduct={successActivateProductDeactivateProduct}
          loadingActivateProductDeactivateProduct={loadingActivateProductDeactivateProduct}
          addProductFeatures={handleAddProductFeatures}
          addProductSpecifications={handleAddProductSpecifications}
          removeProductSpecification={handleRemoveProductSpecification}
          removeProductImage={handleRemoveProductImage}
          productsCategory={productsCategory}
        />



        {error &&
          <AlertModal
            title='Error'
            message={error}
            confirmButtonText="Ok"
            type="error"
            onConfirm={() => {
              dispatch(clearError())
            }}
          />
        }

        {success &&
          <AlertModal
            title='Success'
            message={message}
            confirmButtonText="Ok"
            type="success"
            onConfirm={() => {
              dispatch(clearMessage())
              dispatch(getMyProducts(token))
            }}
          />
        }

        {errorActivateProductDeactivateProduct &&
          <AlertModal
            title='Error'
            message={errorActivateProductDeactivateProduct}
            confirmButtonText="Ok"
            type="error"
            onConfirm={() => {
              dispatch(clearError())
            }}
          />
        }

        {successActivateProductDeactivateProduct &&
          <AlertModal
            title='Success'
            message={message}
            confirmButtonText="Ok"
            type="success"
            onConfirm={() => {
              dispatch(clearMessage())
              dispatch(getMyProducts(token))
            }}
          />
        }


        <footer >

        </footer>
      </Layout>
    </div>
  )
}

export default Products