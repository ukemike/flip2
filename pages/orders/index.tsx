import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import OrderComponent from '../../src/components/dashboard/orders/Order'
import type { NextPage } from 'next'
import Head from 'next/head'
import { getOrdersByMe, getOrdersForMerchant, clearMessage, clearError, acceptOrder, rejectOrder } from '../../src/redux/features/orderSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useCallback } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Services: NextPage = () => {
    const dispatch = useAppDispatch()

    const { token, role, merchant_type } = useAppSelector((state) => state.auth)

    const { loading, loadingFetchOrders, error, success, successFetchOrders, message, orders, ordersForMe } = useAppSelector((state) => state.order)

    // fetch orders
    const fetchOrders = useCallback(() => {
        if (role === 'merchant' && merchant_type === 'business') {
            dispatch(getOrdersForMerchant(token))
        }
        dispatch(getOrdersByMe(token))
    }, [dispatch, token, role, merchant_type])

    useEffect(() => {
        fetchOrders()
    }, [fetchOrders])

    // accept order
    const handleAcceptOrder = useCallback((data: any) => {
        dispatch(acceptOrder(data))
    }, [dispatch])

    // reject order
    const handleRejectOrder = useCallback((data: any) => {
        dispatch(rejectOrder(data))
    }, [dispatch])

    return (
        <div>
            <Layout title="Orders" >
                <Head>
                    <title>Flip</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/flip-favicon.png" />
                </Head>

                <OrderComponent
                    loading={loading}
                    loadingFetchOrders={loadingFetchOrders}
                    orders={orders}
                    success={success}
                    ordersForMe={ordersForMe}
                    acceptOrder={handleAcceptOrder}
                    rejectOrder={handleRejectOrder}
                />


                {error &&
                    <AlertModal
                        title='Error'
                        message={error}
                        confirmButtonText="Ok"
                        type="error"
                        onConfirm={() => {
                            dispatch(clearError())
                        }}
                    />
                }

                {success &&
                    <AlertModal
                        title='Success'
                        message={message}
                        confirmButtonText="Ok"
                        type="success"
                        onConfirm={() => {
                            dispatch(clearMessage())
                            dispatch(getOrdersByMe(token))
                            dispatch(getOrdersForMerchant(token))
                        }}
                    />
                }


                <footer >

                </footer>
            </Layout>
        </div>
    )
}

export default Services