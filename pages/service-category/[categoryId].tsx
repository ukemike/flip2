import React from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Nav from '../../src/components/web/nav/Nav'
import Service from '../../src/components/web/service/ServiceCategory'
import NewsLetter from '../../src/components/web/newsLetter/NewsLetter'
import Footer from '../../src/components/web/footer/Footer'
import { GetStaticProps } from 'next'
import { getAllServices, getServicesCategory } from '../../src/redux/features/serviceSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useState, useCallback } from 'react'
import { useRouter } from "next/router";

const ServiceCategory: NextPage = (props: any) => {
    const { query } = useRouter() as any
    const dispatch = useAppDispatch()

    const [search, setSearch] = useState(typeof window !== 'undefined' && query.search || '')
    const [category, setCategory] = useState(typeof window !== 'undefined' && props.categoryId || '')
    const [state, setState] = useState(typeof window !== 'undefined' && query.state || '')
    const [lga, setLga] = useState(typeof window !== 'undefined' && query.lga || '')
    const [byMerchant, setByMerchant] = useState(typeof window !== 'undefined' && query.byMerchant || '')

    const { services, loading, servicesCategories, loadingFetchServices } = useAppSelector(state => state.service)

    useEffect(() => {
        if (typeof window !== 'undefined') {
            if (query || props) {
                setSearch(query.search || '')
                setState(query.state || '')
                setLga(query.lga || '')
                setCategory(props.categoryId || '')
                setByMerchant(query.byMerchant || '')
            } else {
                setSearch('')
                setState('')
                setLga('')
                setCategory('')
                setByMerchant('')
            }
        }
    }, [query, props])

    const fetchServicesAndServiceByCategory = useCallback(() => {
        if (typeof window !== 'undefined' && props && props.categoryId) {
            dispatch(getAllServices({ search, category, state, lga, byMerchant }))
            dispatch(getServicesCategory(""))
        }
    }, [dispatch, props, search, category, state, lga, byMerchant])

    useEffect(() => {
        fetchServicesAndServiceByCategory()
    }, [fetchServicesAndServiceByCategory])

    return (
        <div>
            <Head>
                <title>Flip</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/flip-favicon.png" />
            </Head>

            <Nav />

            <section className="bg-white w-full h-full">

                <div className='container mx-auto px-4 md:px-10'>

                    <Service
                        services={services}
                        loading={loading}
                        servicesCategories={servicesCategories}
                        loadingFetchServices={loadingFetchServices}
                        query={query}
                        id={props.categoryId}
                    />

                    {/* <Recent /> */}


                    <NewsLetter />

                    <div className="pt-20"></div>


                </div>

            </section>

            <footer className="bg-backg w-full h-full">
                <Footer />
            </footer>

        </div>
    )
}

export const getServerSideProps: GetStaticProps = async (context: any) => {
    const categoryId = context.params.categoryId
    return {
        props: {
            categoryId: categoryId
        }
    }
}

export default ServiceCategory