import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import ServiceComponent from '../../src/components/dashboard/services/Serivce'
import type { NextPage } from 'next'
import Head from 'next/head'
import { getMyServices, createService, updateService, addServiceImages, activateService, deactivateService, removeServiceImage, clearMessage, clearError, getServicesCategory } from '../../src/redux/features/serviceSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Services: NextPage = () => {
    const dispatch = useAppDispatch()

    const { token } = useAppSelector((state) => state.auth)
    const { loading, loadingFetchServices, error, success, message, services, successActivateServiceDeactivateService, loadingActivateServiceDeactivateService, errorActivateServiceDeactivateService, servicesCategories } = useAppSelector((state) => state.service)

    useEffect(() => {
        dispatch(getMyServices(token))
        dispatch(getServicesCategory(token))
    }, [dispatch, token])

    const handleCreateService = (data: any) => {
        dispatch(createService(data))
    }

    const handleUpdateService = (data: any) => {
        dispatch(updateService(data))
    }

    const handleAddServiceImages = (data: any) => {
        dispatch(addServiceImages(data))
    }

    const handleActivateService = (id: number) => {
        dispatch(activateService(id))
    }

    const handleDeactivateService = (id: number) => {
        dispatch(deactivateService(id))
    }

    const handleRemoveServiceImage = (id: number) => {
        dispatch(removeServiceImage(id))
    }

    return (
        <div>
            <Layout title="Services">
                <Head>
                    <title>Cue |  The artisan for Digital and Offline Space</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/flip-favicon.png" />
                </Head>

                <ServiceComponent
                    allService={services}
                    createService={handleCreateService}
                    updateService={handleUpdateService}
                    loading={loading}
                    loadingFetchServices={loadingFetchServices}
                    loadingActivateServiceDeactivateService={loadingActivateServiceDeactivateService}
                    success={success}
                    successActivateServiceDeactivateService={successActivateServiceDeactivateService}
                    addServiceImages={handleAddServiceImages}
                    activateService={handleActivateService}
                    deactivateService={handleDeactivateService}
                    removeServiceImage={handleRemoveServiceImage}
                    servicesCategories={servicesCategories}
                />



                {error &&
                    <AlertModal
                        title='Error'
                        message={error}
                        confirmButtonText="Ok"
                        type="error"
                        onConfirm={() => {
                            dispatch(clearError())
                        }}
                    />
                }

                {success &&
                    <AlertModal
                        title='Success'
                        message={message}
                        confirmButtonText="Ok"
                        type="success"
                        onConfirm={() => {
                            dispatch(clearMessage())
                            dispatch(getMyServices(token))
                        }}
                    />
                }


                {errorActivateServiceDeactivateService &&
                    <AlertModal
                        title='Error'
                        message={errorActivateServiceDeactivateService}
                        confirmButtonText="Ok"
                        type="error"
                        onConfirm={() => {
                            dispatch(clearError())
                        }}
                    />
                }

                {successActivateServiceDeactivateService &&
                    <AlertModal
                        title='Success'
                        message={message}
                        confirmButtonText="Ok"
                        type="success"
                        onConfirm={() => {
                            dispatch(clearMessage())
                            dispatch(getMyServices(token))
                        }}
                    />
                }

                <footer >

                </footer>
            </Layout>
        </div>
    )
}

export default Services