import type { NextPage } from 'next'
import AdminLayout from '../../src/components/dashboard/admin-layout/AdminLayout'
import Head from 'next/head'
import CardList from '../../src/components/dashboard/cards/CardList'
import ChartLine from '../../src/components/dashboard/charts/ChartLine'
import Table from '../../src/components/dashboard/table/Table'
import TopProducts from '../../src/components/dashboard/top-products/TopProducts'
import { getOrdersByMe, getOrdersForMerchant, acceptOrder, rejectOrder, clearMessage, clearError } from '../../src/redux/features/orderSlice'
import { getMyJobs } from '../../src/redux/features/jobSlice'
import { getServiceRequestByConsumer } from '../../src/redux/features/serviceSlice'
import { getTransactions } from '../../src/redux/features/accountSlice'
import { getMyProducts } from '../../src/redux/features/productSlice'
import { getMyServices } from '../../src/redux/features/serviceSlice'
import { getAllProposals } from '../../src/redux/features/proposalSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useState, useCallback } from 'react'
import TopCategory from '../../src/components/dashboard/top-category/TopCategory'
import AlertModal from '../../src/components/alert/Alert'
import Loader from '../../src/components/dashboard/loader/Loader'


const Dashboard: NextPage = () => {
  const dispatch = useAppDispatch()

  const { token, role, merchant_type } = useAppSelector((state) => state.auth)

  const { loading, loadingFetchOrders, error, success, message, orders, ordersForMe } = useAppSelector((state) => state.order)

  const { jobs, loadingFetchJobs } = useAppSelector(state => state.job)

  const { loadingFetcServiceRequest, serviceRequests } = useAppSelector((state) => state.service)

  const { transactions, loadingFetchTransactions } = useAppSelector((state) => state.account)

  const { loadingFetchProducts, products } = useAppSelector((state) => state.product)

  const { loadingFetchServices, services, } = useAppSelector((state) => state.service)

  const { proposals, loadingFetctProposals } = useAppSelector(state => state.proposal)

  const [isMerchantType, setIsMerchantType] = useState('' as any)
  const [isRole, setIsRole] = useState('' as any)

  // set merchant type and role to state on mount to avoiid hydration error
  useEffect(() => {
    setIsMerchantType(merchant_type)
    setIsRole(role)
  }, [merchant_type, role])


  // fetch orders, products, services, proposals
  const fetchmerchantOrdersProductsServicesProposals = useCallback(() => {
    if (role === 'merchant' && merchant_type === 'business') {
      dispatch(getOrdersForMerchant(token))
      dispatch(getMyProducts(token))
      dispatch(getMyServices(token))
    }
    if (role === 'merchant' && merchant_type === 'personal') {
      dispatch(getAllProposals(token))
    }
  }, [dispatch, token, role, merchant_type])

  useEffect(() => {
    fetchmerchantOrdersProductsServicesProposals()
  }, [fetchmerchantOrdersProductsServicesProposals])

  // fetch orders, jobs, service requests, transactions
  const fetchConsumerOrdersJobsServiceRequestsTransactions = useCallback(() => {
    dispatch(getOrdersByMe(token))
    dispatch(getMyJobs(token))
    dispatch(getServiceRequestByConsumer(token))
    dispatch(getTransactions(token))
  }, [dispatch, token])

  useEffect(() => {
    fetchConsumerOrdersJobsServiceRequestsTransactions()
  }, [fetchConsumerOrdersJobsServiceRequestsTransactions])

  // accept order
  const handleAcceptOrder = useCallback((data: any) => {
    dispatch(acceptOrder(data))
  }, [dispatch])

  // reject order
  const handleRejectOrder = useCallback((data: any) => {
    dispatch(rejectOrder(data))
  }, [dispatch])

  return (
    <div>
      <AdminLayout title="Dashboard" >
        <Head>
          <title>Flip</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/flip-favicon.png" />
        </Head>

        {loadingFetchOrders || loadingFetchTransactions || loadingFetchJobs || loadingFetcServiceRequest || loadingFetchProducts || loadingFetchServices || loadingFetctProposals ? (
          <Loader />
        ) : (
          <div className="flex flex-col md:flex-row gap-4 pt-6">
            <div className="w-full md:w-3/4">

              <CardList
                isRole={isRole}
                isMerchantType={isMerchantType}
                ordersForMe={ordersForMe}
                orders={orders}
                jobs={jobs}
                serviceRequests={serviceRequests}
                products={products}
                services={services}
                proposals={proposals}
              />


              {/* Charts */}
              <div className="">
                <ChartLine
                  transactions={transactions}
                />
              </div>

              <div className="mt-4">
                <Table
                  orders={isRole === 'merchant' && isMerchantType === 'business' ? orders : ordersForMe}
                  loading={loading}
                  acceptOrder={handleAcceptOrder}
                  rejectOrder={handleRejectOrder}
                />
              </div>

            </div>

            <div className="w-full md:w-1/4">
              {isRole === 'merchant' && isMerchantType === 'business' && (
                <TopCategory />
              )}

              <TopProducts />
            </div>

          </div>
        )}



        {error &&
          <AlertModal
            title='Error'
            message={error}
            confirmButtonText="Ok"
            type="error"
            onConfirm={() => {
              dispatch(clearError())
            }}
          />
        }

        {success &&
          <AlertModal
            title='Success'
            message={message}
            confirmButtonText="Ok"
            type="success"
            onConfirm={() => {
              dispatch(clearMessage())
              dispatch(getOrdersByMe(token))
              dispatch(getOrdersForMerchant(token))
            }}
          />
        }

        <footer>

        </footer>
      </AdminLayout>

    </div>
  )
}

export default Dashboard
