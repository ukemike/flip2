import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import type { NextPage } from 'next'
import ProfileComponent from '../../src/components/dashboard/profile/Profile'
import Head from 'next/head'
import { getMyProfile, updateBusinessMerchantProfile, updatePersonalMerchantProfile, updateConsumerProfile, addMerchantSkills, addMerchantLanguages, addMerchantWorkHistory, addMerchantEducation, addMerchantProjects, removeMerchantEducation, editMerchantEducation, removeMerchantWorkHistory, editMerchantWorkHistory, removeMerchantProjects, editMerchantProjects, removeMerchantSkills, editMerchantSkills, removeMerchantLanguages, editMerchantLanguages, updateBankDetails, getTransactions, updateProfilePicture, getStates, getLgas, clearError, clearMessage } from '../../src/redux/features/accountSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useCallback } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Profile: NextPage = () => {
  const dispatch = useAppDispatch()

  const { isAuthenticated, token } = useAppSelector((state) => state.auth)
  const { profile, transactions, loadingFetchTransactions, loading, loadingFetchProfile, message, success, error, states, lgas, loadingFetchCountriesStatesLgas, loadingUpdateProfilePicture } = useAppSelector((state) => state.account)

  const fetchProfileAndTransactions = useCallback(() => {
    dispatch(getMyProfile(token))
    dispatch(getTransactions(token))
    dispatch(getStates(160))
  }, [dispatch, token])

  useEffect(() => {
    if (isAuthenticated) {
      fetchProfileAndTransactions()
    }
  }, [fetchProfileAndTransactions, isAuthenticated])

  const handleUpdateBusinessMerchantProfile = useCallback((data: any) => {
    dispatch(updateBusinessMerchantProfile(data))
  }, [dispatch])

  const handleUpdatePersonalMerchantProfile = useCallback((data: any) => {
    dispatch(updatePersonalMerchantProfile(data))
  }, [dispatch])

  const handleUpdateConsumerProfile = useCallback((data: any) => {
    dispatch(updateConsumerProfile(data))
  }, [dispatch])

  const handleAddMerchantSkills = useCallback((data: any) => {
    dispatch(addMerchantSkills(data))
  }, [dispatch])

  const handleAddMerchantLanguages = useCallback((data: any) => {
    dispatch(addMerchantLanguages(data))
  }, [dispatch])

  const handleAddMerchantWorkHistory = useCallback((data: any) => {
    dispatch(addMerchantWorkHistory(data))
  }, [dispatch])

  const handleAddMerchantEducation = useCallback((data: any) => {
    dispatch(addMerchantEducation(data))
  }, [dispatch])

  const handleAddMerchantProjects = useCallback((data: any) => {
    dispatch(addMerchantProjects(data))
  }, [dispatch])

  const handleRemoveMerchantEducation = useCallback((id: number) => {
    dispatch(removeMerchantEducation(id))
  }, [dispatch])

  const handleEditMerchantEducation = useCallback((data: any) => {
    dispatch(editMerchantEducation(data))
  }, [dispatch])

  const handleRemoveMerchantWorkHistory = useCallback((id: number) => {
    dispatch(removeMerchantWorkHistory(id))
  }, [dispatch])

  const handleEditMerchantWorkHistory = useCallback((data: any) => {
    dispatch(editMerchantWorkHistory(data))
  }, [dispatch])

  const handleRemoveMerchantProjects = useCallback((id: number) => {
    dispatch(removeMerchantProjects(id))
  }, [dispatch])

  const handleEditMerchantProjects = useCallback((data: any) => {
    dispatch(editMerchantProjects(data))
  }, [dispatch])

  const handleRemoveMerchantSkills = useCallback((id: number) => {
    dispatch(removeMerchantSkills(id))
  }, [dispatch])

  const handleEditMerchantSkills = useCallback((data: any) => {
    dispatch(editMerchantSkills(data))
  }, [dispatch])

  const handleRemoveMerchantLanguages = useCallback((id: number) => {
    dispatch(removeMerchantLanguages(id))
  }, [dispatch])

  const handleEditMerchantLanguages = useCallback((data: any) => {
    dispatch(editMerchantLanguages(data))
  }, [dispatch])

  const handleUpdateBankDetails = useCallback((data: any) => {
    dispatch(updateBankDetails(data))
  }, [dispatch])

  const handleUpdateProfilePicture = useCallback((data: any) => {
    dispatch(updateProfilePicture(data))
  }, [dispatch])

  const handleGetLgas = useCallback((state: number) => {
    dispatch(getLgas(state))
  }, [dispatch])

  return (
    <div>
      <Layout title="Profile">
        <Head>
          <title>Flip</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/flip-favicon.png" />
        </Head>



        <ProfileComponent
          userDetails={profile}
          loading={loading}
          loadingFetchProfile={loadingFetchProfile}
          success={success}
          updateBusinessMerchantProfile={handleUpdateBusinessMerchantProfile}
          updatePersonalMerchantProfile={handleUpdatePersonalMerchantProfile}
          updateConsumerProfile={handleUpdateConsumerProfile}
          addMerchantEducation={handleAddMerchantEducation}
          removeMerchantEducation={handleRemoveMerchantEducation}
          editMerchantEducation={handleEditMerchantEducation}
          addMerchantWorkHistory={handleAddMerchantWorkHistory}
          editMerchantWorkHistory={handleEditMerchantWorkHistory}
          removeMerchantWorkHistory={handleRemoveMerchantWorkHistory}
          removeMerchantProjects={handleRemoveMerchantProjects}
          editMerchantProjects={handleEditMerchantProjects}
          addMerchantProjects={handleAddMerchantProjects}
          addMerchantSkills={handleAddMerchantSkills}
          removeMerchantSkills={handleRemoveMerchantSkills}
          editMerchantSkills={handleEditMerchantSkills}
          addMerchantLanguages={handleAddMerchantLanguages}
          removeMerchantLanguages={handleRemoveMerchantLanguages}
          editMerchantLanguages={handleEditMerchantLanguages}
          updateBankDetails={handleUpdateBankDetails}
          transactions={transactions}
          loadingFetchTransactions={loadingFetchTransactions}
          updateProfilePicture={handleUpdateProfilePicture}
          getLgas={handleGetLgas}
          states={states}
          lgas={lgas}
          loadingFetchCountriesStatesLgas={loadingFetchCountriesStatesLgas}
          loadingUpdateProfilePicture={loadingUpdateProfilePicture}
        />


        {error &&
          <AlertModal
            title='Error'
            message={error}
            confirmButtonText="Ok"
            type="error"
            onConfirm={() => {
              dispatch(clearError())
            }}
          />
        }

        {success &&
          <AlertModal
            title='Success'
            message={message}
            confirmButtonText="Ok"
            type="success"
            onConfirm={() => {
              dispatch(clearMessage())
              dispatch(getMyProfile(token))
            }}
          />
        }


        <footer >

        </footer>
      </Layout>
    </div>
  )
}

export default Profile