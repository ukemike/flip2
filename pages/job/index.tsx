import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import type { NextPage } from 'next'
import Head from 'next/head'
import JobComponent from '../../src/components/dashboard/job/Job'
import { createJob, updateJob, deactivateJob, activateJob, getMyJobs, clearError, clearMessage } from '../../src/redux/features/jobSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Job: NextPage = () => {
    const dispatch = useAppDispatch()
    const { token } = useAppSelector((state) => state.auth)
    const { jobs, success, error, message, loading, loadingFetchJobs } = useAppSelector(state => state.job)

    useEffect(() => {
        dispatch(getMyJobs(token))
    }, [dispatch, token])


    const handleCreateJob = (data: any) => {
        dispatch(createJob(data))
    }

    const handleUpdateJob = (data: any) => {
        dispatch(updateJob(data))
    }

    const handleDeactivateJob = (id: number) => {
        dispatch(deactivateJob(id))
    }

    const handleActivateJob = (id: number) => {
        dispatch(activateJob(id))
    }


    return (
        <Layout title="Gigs">
            <Head>
                <title>Cue |  The artisan for Digital and Offline Space</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/flip-favicon.png" />
            </Head>

            <JobComponent
                jobs={jobs}
                success={success}
                loading={loading}
                loadingFetchJobs={loadingFetchJobs}
                createJob={handleCreateJob}
                updateJob={handleUpdateJob}
                deactivateJob={handleDeactivateJob}
                activateJob={handleActivateJob}
            />

            
        {error &&
          <AlertModal
            title='Error'
            message={error}
            confirmButtonText="Ok"
            type="error"
            onConfirm={() => {
              dispatch(clearError())
            }}
          />
        }

        {success &&
          <AlertModal
            title='Success'
            message={message}
            confirmButtonText="Ok"
            type="success"
            onConfirm={() => {
              dispatch(clearMessage())
              dispatch(getMyJobs(token))
            }}
          />
        }


            <footer >

            </footer>
        </Layout>
    )
}

export default Job