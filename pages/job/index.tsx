import React from 'react'
import Layout from '../../src/components/dashboard/admin-layout/AdminLayout'
import type { NextPage } from 'next'
import Head from 'next/head'
import JobComponent from '../../src/components/dashboard/job/Job'
import { createJob, updateJob, deactivateJob, activateJob, getMyJobs, clearError, clearMessage } from '../../src/redux/features/jobSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useCallback } from 'react'
import AlertModal from '../../src/components/alert/Alert'

const Job: NextPage = () => {
  const dispatch = useAppDispatch()
  const { token } = useAppSelector((state) => state.auth)
  const { jobs, success, error, message, loading, loadingFetchJobs } = useAppSelector(state => state.job)


  // fetch jobs
  const fetchJobs = useCallback(() => {
    dispatch(getMyJobs(token))
  }, [dispatch, token])

  useEffect(() => {
    fetchJobs()
  }, [fetchJobs])

  // create job
  const handleCreateJob = useCallback((data: any) => {
    dispatch(createJob(data))
  }, [dispatch])

  // update job
  const handleUpdateJob = useCallback((data: any) => {
    dispatch(updateJob(data))
  }, [dispatch])

  // deactivate job
  const handleDeactivateJob = useCallback((data: any) => {
    dispatch(deactivateJob(data))
  }, [dispatch])

  // activate job
  const handleActivateJob = useCallback((data: any) => {
    dispatch(activateJob(data))
  }, [dispatch])


  return (
    <Layout title="Gigs">
      <Head>
        <title>Flip</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/flip-favicon.png" />
      </Head>

      <JobComponent
        jobs={jobs}
        success={success}
        loading={loading}
        loadingFetchJobs={loadingFetchJobs}
        createJob={handleCreateJob}
        updateJob={handleUpdateJob}
        deactivateJob={handleDeactivateJob}
        activateJob={handleActivateJob}
      />


      {error &&
        <AlertModal
          title='Error'
          message={error}
          confirmButtonText="Ok"
          type="error"
          onConfirm={() => {
            dispatch(clearError())
          }}
        />
      }

      {success &&
        <AlertModal
          title='Success'
          message={message}
          confirmButtonText="Ok"
          type="success"
          onConfirm={() => {
            dispatch(clearMessage())
            dispatch(getMyJobs(token))
          }}
        />
      }


      <footer >

      </footer>
    </Layout>
  )
}

export default Job