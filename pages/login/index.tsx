import type { NextPage } from 'next'
import Head from 'next/head'
import LoginComponent from '../../src/components/auth/Login'
import AlertModal from '../../src/components/alert/Alert'
import { signIn, clearError, clearMessage } from '../../src/redux/features/authSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useState } from 'react'
import { GetStaticProps } from 'next'

const Login: NextPage = (props: any) => {
  const dispatch = useAppDispatch()

  const [hostName, setHostName] = useState('')

  useEffect(() => {
    setHostName(window.location.origin)
  }, [])

  const { loading, error, success, message, user } = useAppSelector((state) => state.auth)


  useEffect(() => {
    if (success) {
      dispatch(clearMessage())
      if (window.history.length > 1 && props?.referer !== `${hostName}/login` && props?.referer !== `${hostName}/register`) {
        window.history.back()
        setTimeout(() => {
          window.location.reload()
        }, 100)
      } else {
        window.location.href = '/'
      }
    }
  }, [success, dispatch, props?.referer, hostName])

  const handleSignIn = (data: any) => {
    dispatch(signIn(data))
  }
  return (
    <div>
      <Head>
        <title>Cue |  The artisan for Digital and Offline Space</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/flip-favicon.png" />
      </Head>

      <LoginComponent login={handleSignIn} loading={loading} />

      {error &&
        <AlertModal
          title='Error'
          message={error}
          confirmButtonText="Ok"
          type="error"
          onConfirm={() => {
            dispatch(clearError())
          }}
        />
      }

      {/* {success &&
        <AlertModal
          title='Success'
          message={message}
          confirmButtonText="Ok"
          type="success"
          onConfirm={() => {
            dispatch(clearMessage())
            if (window.history.length > 1) {
              window.history.back()
              setTimeout(() => {
                window.location.reload()
              }, 100)
            } else {
              window.location.href = '/'
            }
          }}
        />
      } */}



      <footer >

      </footer>
    </div>
  )
}

export const getServerSideProps: GetStaticProps = async (context: any) => {
  return {
    props: {
      referer: context.req.headers.referer || ''
    }
  }
}

export default Login
