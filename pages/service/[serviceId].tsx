import React from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import "react-multi-carousel/lib/styles.css";
import Nav from '../../src/components/web/nav/Nav'
import ServiceDetailsComponent from '../../src/components/web/service/ServiceDetails'
import NewsLetter from '../../src/components/web/newsLetter/NewsLetter'
import Footer from '../../src/components/web/footer/Footer'
import { GetStaticProps } from 'next'
import { getSingleService, getServicesByCategory, requestService, clearError, clearMessage } from '../../src/redux/features/serviceSlice'
import { useAppSelector, useAppDispatch } from '../../src/redux/hooks'
import { useEffect, useState } from 'react'
import AlertModal from '../../src/components/alert/Alert'
import { useRouter } from 'next/router'

const ServiceDetails: NextPage = (props: any) => {
    const dispatch = useAppDispatch()
    const router = useRouter()

    const { service, services, loadingFetchServices, success, error, message, loading } = useAppSelector(state => state.service)

    const [serviceCategoryId, setServiceCategoryId] = useState(Number)

    useEffect(() => {
        dispatch(getSingleService(props.serviceId))
        dispatch(getServicesByCategory(serviceCategoryId))
    }, [props.serviceId, dispatch, serviceCategoryId])

    useEffect(() => {
        if (service && service.category) {
            setServiceCategoryId(service.category.categoryID)
        }
    }, [service])

    const handleRequestService = (data: any) => {
        dispatch(requestService(data))
    }

    return (
        <div>
            <Head>
                <title>Cue |  The artisan for Digital and Offline Space</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/flip-favicon.png" />
            </Head>

            <Nav />

            <section className="bg-white w-full h-full">

                <div className='container mx-auto px-4 md:px-10'>

                    <ServiceDetailsComponent
                        service={service}
                        services={services}
                        loadingFetchServices={loadingFetchServices}
                        requestService={handleRequestService}
                        loading={loading}
                    />

                    {error &&
                        <AlertModal
                            title='Error'
                            message={error}
                            confirmButtonText="Ok"
                            type="error"
                            onConfirm={() => {
                                dispatch(clearError())
                            }}
                        />
                    }

                    {success &&
                        <AlertModal
                            title='Success'
                            message={message}
                            confirmButtonText="Back to Homepage"
                            type="success"
                            onConfirm={() => {
                                dispatch(clearMessage())
                                router.push('/')
                            }}
                        />
                    }


                    <NewsLetter />

                    <div className="pt-20"></div>


                </div>

            </section>

            <footer className="bg-backg w-full h-full">
                <Footer />
            </footer>

        </div>
    )
}


export const getServerSideProps: GetStaticProps = async (context: any) => {
    const serviceId = context.params.serviceId
    return {
        props: {
            serviceId: serviceId
        }
    }
}
export default ServiceDetails